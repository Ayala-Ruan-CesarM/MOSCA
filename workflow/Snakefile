import pathlib
import pandas as pd
import sys
from mosca_tools import perform_alignment, make_entry_report, make_protein_report

scripts_dir = sys.path[0]
exps = pd.DataFrame(config["experiments"])

def set_name(files, data_type):
    filename = files.split('/')[-1]
    if data_type == 'protein':
        return '_'.join(filename.split('_')[:-1])
    if ',' in files:
        return filename.split(',')[0].split('_R')[0]
    return filename.split('.fa')[0]

for i in range(len(exps)):
    if pd.isnull(exps.iloc[i]['Name']) or exps.iloc[i]['Name'] == '':
        exps.iloc[i, exps.columns.get_loc('Name')] = set_name(
            exps.iloc[i]['Files'], exps.iloc[i]['Data type'])
    if not config['do_assembly']:
        exps.iloc[i]['Sample'] = exps.iloc[i]['Name']

pathlib.Path(f"{config['output']}").mkdir(parents=True, exist_ok=True)
exps.to_csv(f"{config['output']}/exps.tsv", sep = '\t', index = False)

print(exps)

mg_exps = exps[exps["Data type"] == 'dna']
mt_exps = exps[exps["Data type"] == 'mrna']
mp_exps = exps[exps["Data type"] == 'protein']
if len(mg_exps) == 0 and len(mt_exps) != 0:
    mg_exps = mt_exps
not_mp_exps = exps[exps["Data type"] != 'protein']

def all_input(wildcards):
    if config['do_assembly']:
        return (
            expand("{output}/MOSCA_Protein_Report.xlsx", output=config["output"]) +
            expand("{output}/MOSCA_Entry_Report.xlsx", output=config["output"]) +
            expand("{output}/technical_report.tsv", output=config["output"]) +
            expand("{output}/MOSCA_General_Report.xlsx", output=config["output"]) +
            expand("{output}/MOSCA_results.zip", output=config["output"]) +
            expand("{output}/Binning/{sample}/checkm.tsv", output=config["output"], sample=set(exps['Sample'])) +
            expand("{output}/KEGG_maps/KEGGCharter_results.tsv", output=config["output"]) +
            expand("{output}/Metaproteomics/{sample}_metaproteomics.tsv", output=config["output"],
                sample=set(mp_exps["Sample"])) +
            expand("{output}/Annotation/{sample}/reCOGnizer_results.xlsx",output=config["output"],
                sample=set(exps['Sample']))
        )
    else:
        return f"{config['output']}/MOSCA_Entry_Counts_Report.xlsx"

def preprocess_input(wildcards):
    # get first value (in case multiple) and split on commas
    print(wildcards)
    print(exps.loc[exps['Name'] == wildcards.name, 'Files'].iloc[0].split(','))
    return exps.loc[exps['Name'] == wildcards.name, 'Files'].iloc[0].split(',')

def join_reads_input(wildcards):
    df = mg_exps[mg_exps['Sample'] == wildcards.sample].reset_index()
    return [f'{config["output"]}/Preprocess/Trimmomatic/quality_trimmed_{df.iloc[i]["Name"]}{fr}.fq'
           for i in range(len(df))
           for fr in (['_forward_paired', '_reverse_paired'] if ',' in df.iloc[i]["Files"] else [''])]

def fastq2fasta_input(wildcards):
    return expand("{output}/Preprocess/Trimmomatic/quality_trimmed_{name}{fr}.fq", output=config["output"],
        fr=(['_forward_paired', '_reverse_paired'] if exps["Files"].str.contains(',').tolist() else ''),
        name = wildcards.sample)

def annotation_input(wildcards):
    if config['do_assembly']:
        return expand("{output}/Assembly/{sample}/scaffolds.fasta", output = config["output"], sample = wildcards.sample)
    return expand(
        "{output}/Preprocess/piled_{name}.fasta", output = config["output"], name = wildcards.sample)

def upimapi_input(wildcards):
    if config['do_assembly']:
        return expand("{output}/Annotation/{sample}/aligned.blast", output=config["output"], sample=set(exps['Sample']))
    return expand("{output}/Annotation/{name}/aligned.blast", output=config["output"], name=set(exps['Name']))

rule all:
    input:
        all_input

rule preprocess:
    input:
        preprocess_input
    output:
        expand("{output}/Preprocess/Trimmomatic/quality_trimmed_{{name}}{fr}.fq", output = config["output"],
            fr = (['_forward_paired', '_reverse_paired'] if exps["Files"].str.contains(',').tolist() else ''))
    threads:
        config["threads"]
    run:
        shell("python {scripts_dir}/preprocess.py -i {reads} -t {threads} -o {output}/Preprocess "
              "-d {data_type} -rd {resources_directory} -n {wildcards.name} --minlen {minlen} --avgqual {avgqual}",
            output = config["output"], reads = ",".join(input), resources_directory = config["resources_directory"],
            data_type = exps.loc[exps['Name'] == wildcards.name]["Data type"].iloc[0],
            minlen = config["minimum_read_length"], avgqual = config["minimum_read_average_quality"])

rule join_reads:
    input:
        join_reads_input
    output:
        expand("{output}/Preprocess/{{sample}}{fr}.fastq", output = config["output"],
            fr = (['_forward', '_reverse'] if exps["Files"].str.contains(',').tolist() else ''))
    threads: 1
    run:
        for file in input:
            if 'forward' in file:
                shell("touch {output}/Preprocess/{wildcards.sample}_forward.fastq; cat {file} >> "
                      "{output}/Preprocess/{wildcards.sample}_forward.fastq", output = config["output"])
            elif 'reverse' in file:
                shell("touch {output}/Preprocess/{wildcards.sample}_reverse.fastq; cat {file} >> "
                      "{output}/Preprocess/{wildcards.sample}_reverse.fastq", output = config["output"])
            else:
                shell("touch {output}/Preprocess/{wildcards.sample}.fastq; cat {file} >> "
                      "{output}/Preprocess/{wildcards.sample}.fastq", output = config["output"])

rule assembly:
    input:
        expand("{output}/Preprocess/{{sample}}{fr}.fastq", output = config["output"],
            fr = (['_forward', '_reverse'] if exps["Files"].str.contains(',').tolist() else ''))
    output:
        expand("{output}/Assembly/{{sample}}/contigs.fasta", output = config["output"],
            sample = set(exps['Sample'])),
        expand("{output}/Assembly/{{sample}}/scaffolds.fasta", output = config["output"],
            sample = set(exps['Sample']))
    threads:
        config["threads"]
    params:
        assembler = config["assembler"],
        reads = ",".join(expand("{output}/Preprocess/{{sample}}{fr}.fastq", output = config["output"],
            fr = (['_forward', '_reverse'] if exps["Files"].str.contains(',').tolist() else ''))),
        max_memory = config["max_memory"],
        output = config["output"]
    shell:
        "python {scripts_dir}/assembly.py -r {params.reads} -t {threads} -a {params.assembler} -m {params.max_memory} "
        "-o {params.output}/Assembly/{wildcards.sample}"

rule binning:
    input:
        reads = expand("{output}/Preprocess/{{sample}}{fr}.fastq", output = config["output"],
            fr = (['_forward', '_reverse'] if exps["Files"].str.contains(',').tolist() else '')),
        contigs = expand("{output}/Assembly/{{sample}}/scaffolds.fasta", output = config["output"])
    output:
        expand("{output}/Binning/{{sample}}/checkm.tsv", output = config["output"], sample = set(exps['Sample']))
    threads:
        config["threads"]
    params:
        output = config["output"],
        markerset = config["markerset"],
        iterative_binning = ' --iterative-binning' if config['do_iterative_binning'] else '',
        reads = ",".join(lambda wildcards, input: input.reads)
    shell:
        "python {scripts_dir}/binning.py -c {input.contigs} -t {threads} -o {params.output}/Binning/{wildcards.sample} "
        "-r {params.reads} -mset {params.markerset}{paams.iterative_binning}")

rule fastq2fasta:
    input:
        fastq2fasta_input
    output:
        f"{config['output']}/Preprocess/piled_{{sample}}.fasta"
    threads:
        1
    shell:
        "cat {input} | paste - - - - | cut -f 1,2 | sed 's/^@/>/' | tr '\\t' '\\n' > {output}"

rule annotation:
    input:
        annotation_input
    output:
        expand("{output}/Annotation/{{sample}}/fgs.faa", output = config["output"]),
        expand("{output}/Annotation/{{sample}}/fgs.ffn", output = config["output"]),
        expand("{output}/Annotation/{{sample}}/UPIMAPI_results.tsv", output = config["output"])
    threads:
        config["threads"]
    params:
        output = config["output"],
        rd = config["resources_directory"],
        error_model = config["error_model"],
        upimapi_database = config["upimapi_database"],
        assembled = ' --assembled' if config['do_assembly'] else '',
        taxids = f' --taxids {config["upimapi_taxids"]}' if config["upimapi_database"] == 'taxids' else '',
        max_target_seqs = config["upimapi_max_target_seqs"],
        cols = '&'.join(config['uniprot_columns']), dbs = '&'.join(config['uniprot_databases']),
        input = ",".join(lambda wildcards, input: input) if not config['do_assembly'] else (
            lambda wildcards, input: input)
    shell:
        'python {scripts_dir}/annotation.py -i {input} -t {threads} -o {params.output}/Annotation/{wildcards.sample} '
        '-rd {params.rd} -em {params.error_model} -db {params.upimapi_database} -mts {params.max_target_seqs}'
        '{params.assembled}{params.taxids} -cols "{params.cols}" -dbs "{params.dbs}"'

rule recognizer:
    input:
        expand("{output}/Annotation/{{sample}}/fgs.faa", output = config["output"])
    output:
        expand("{output}/Annotation/{{sample}}/reCOGnizer_results.xlsx", output = config["output"])
    threads:
        config["threads"]
    params:
        output = f'{config["output"]}/Annotation',
        resources_directory = config["resources_directory"],
        recognizer_databases = ','.join(config["recognizer_databases"]),
        download_cdd_resources = '' if not config['download_cdd_resources'] else ' -dr'
    shell:
        "recognizer.py -f {input} -t {threads} -o {params.output}/{wildcards.sample} -rd {params.resources_directory}"
        "{params.download_cdd_resources} -dbs {params.recognizer_databases} -sd "
        "--tax-file {params.output}/{wildcards.sample}/UPIMAPI_results.tsv --protein-id-col Entry "
        "--tax-col 'Taxonomic lineage IDs (SPECIES)' --species-taxids"

rule quantification_analysis:
    input:
        expand("{output}/Preprocess/Trimmomatic/quality_trimmed_{name}{fr}.fq", output = config["output"],
            name = not_mp_exps["Name"],
            fr = (['_forward_paired', '_reverse_paired'] if exps["Files"].str.contains(',').tolist() else '')),
        expand("{output}/Assembly/{sample}/contigs.fasta", output = config["output"],
            sample = set(exps["Sample"])),
        expand("{output}/Annotation/{sample}/fgs.ffn", output = config["output"],
            sample = set(exps["Sample"]))
    output:
        expand("{output}/Quantification/{name}.readcounts", output = config["output"],
            name = set(not_mp_exps['Name']))
    threads: config["threads"]
    run:
        for i in exps.index:
            if exps.iloc[i]['Data type'] == 'mrna':
                reference = f"{config['output']}/Annotation/{exps.iloc[i]['Sample']}/fgs.ffn"
            elif exps.iloc[i]['Data type'] == 'dna':
                reference = f"{config['output']}/Assembly/{exps.iloc[i]['Sample']}/contigs.fasta"
            else:
                continue
            perform_alignment(
                reference, [f"{config['output']}/Preprocess/Trimmomatic/"
                f"quality_trimmed_{exps.iloc[i]['Name']}_{fr}_paired.fq" for fr in ['forward', 'reverse']],
                f"{config['output']}/Quantification/{exps.iloc[i]['Name']}", threads=threads)

rule metaphlan:
    input:
        expand("{output}/Preprocess/{{sample}}{fr}.fastq", output = config["output"],
            fr = (['_forward', '_reverse'] if exps["Files"].str.contains(',').tolist() else ''))
    output:
        expand("{output}/Taxonomy/{{sample}}_profiled_metagenome.txt", output = config["output"])
    threads: config["threads"]
    params:
        reads = ",".join(lambda wildcards, input: input),
        output= config["output"]
    shell:
        """
        metaphlan {params.reads} --bowtie2out {params.output}/Taxonomy/{wildcards.sample}_mg.bowtie2.bz2 \
        --nproc {threads} --input_type fastq
        metaphlan {params.output}/Taxonomy/{wildcards.sample}_mg.bowtie2.bz2 --nproc {threads} --input_type bowtie2out \
        -o {params.output}/Taxonomy/{wildcards.sample}_profiled_metagenome.txt
        """

rule metaproteomics:
    input:
        spectra_folders=[directory(folder) for folder in mp_exps[mp_exps['Sample'] == (
            lambda wildcards: wildcards.sample)]['Files']],
        profiled="{{output}}/Taxonomy/{{sample}}_profiled_metagenome.txt"
    output:
        expand("{output}/Metaproteomics/{sample}_metaproteomics.tsv", output = config["output"],
            sample = set(exps["Sample"])),
        expand("{output}/Metaproteomics/{sample}/spectracounts.tsv", output = config["output"],
            sample = set(exps["Sample"]))
    threads: config["threads"]
    params:
        folders = ','.join(mp_exps[mp_exps['Sample'] == (
            lambda wildcards: wildcards.spectra_folders)]['Files'].tolist()),
        names = ','.join(mp_exps[mp_exps['Sample'] == (
            lambda wildcards: wildcards.spectra_folders)]['Name'].tolist()),
        workflow=config["proteomics_workflow"],
        contaminants_database=config["proteomics_contaminants_database"],
        protease=config["protease"] if config["protease_file"] == "" else config["protease_file"],
        max_memory=config["max_memory"],
        resources_directory=config["resources_directory"],
        ref_taxa_level=config["reference_proteomes_taxa_level"],
        output=config["output"]
    shell:
        "python {scripts_dir}/metaproteomics_analyser.py -sf {params.folders} -ns {params.names} -t {threads} "
        "-o {output}/Metaproteomics/{wildcards.sample} -w {params.workflow} "
        "-db {params.output}/Annotation/{wildcards.sample}/fgs.faa -cdb {params.contaminants_database} "
        "-mpar {output}/Taxonomy/{wildcards.sample}_profiled_metagenome.txt --protease {params.protease} "
        "-mmem {params.max_memory} -rd {params.resources_directory} -rtl {params.ref_taxa_level}"

rule mp_differential_expression:
    input:
        "{{output}}/Metaproteomics/{{sample}}/spectracounts.tsv"
    output:
        expand("{output}/Metaproteomics/{sample}/quantification.tsv", output = config["output"],
            sample = set(not_mp_exps['Name']))
    threads: 1
    params:
        outdir = "{{output}}/Metaproteomics/{{sample}}",
        conditions = ','.join(exps[exps['Data type'] == 'protein']['Condition'].tolist())
    shell:
        "Rscript {scripts_dir}/proteomics_postprocessing.R -m {input} -o {params.outdir} -c {params.conditions}"

rule protein_report:
    input:
        expand("{output}/Annotation/{sample}/UPIMAPI_results.tsv", output = config["output"],
            sample = set(exps['Sample'])) +
        expand("{output}/Annotation/{sample}/reCOGnizer_results.xlsx", output = config["output"],
            sample = set(exps["Sample"])) +
        expand("{output}/Quantification/{name}.readcounts", output = config["output"],
            name = set(not_mp_exps['Name'])) +
        expand("{output}/Metaproteomics/{sample}/quantification.tsv", output = config["output"],
            sample = set(not_mp_exps['Name'])) if len(mp_exps) > 0 else []
    output:
        f"{config['output']}/MOSCA_Protein_Report.xlsx"
    threads: 1
    run:
        make_protein_report(config["output"], exps)

rule entry_report:
    input:
        f"{config['output']}/MOSCA_Protein_Report.xlsx"
    output:
        f"{config['output']}/MOSCA_Entry_Report.xlsx",
        f"{config['output']}/Quantification/expression_matrix.tsv"
    threads: 1
    run:
        make_entry_report(f"{wildcards.output}/MOSCA_Protein_Report.xlsx", wildcards.output, exps)

'''
rule entry_count:
    input:
        uniprotinfo=f"{config['output']}/Annotation/uniprotinfo.tsv",
        blasts=expand("{output}/Annotation/{name}/aligned.blast",output=config["output"], name=mg_exps['Name'].tolist())
    output:
        f"{config['output']}/MOSCA_Entry_Counts_Report.xlsx",
        f"{config['output']}/Quantification/expression_matrix.tsv"
    threads:
        1
    run:
        uniprotinfo = pd.read_csv(input.uniprotinfo[0], sep='\t')
        result = pd.DataFrame(columns=['sseqid'])
        i = 1
        names = []
        for blast in input.blasts:
            name = blast.split('/')[-2]
            print(f'[{i}/{len(input.blasts)}] Quantifying entries for: {blast}')
            data = parse_blast(blast).groupby('sseqid').size().reset_index(name=name)
            data['sseqid'] = [ide.split('|')[1] if ide != '*' else ide for ide in data['sseqid']]
            result = pd.merge(result, data, on='sseqid', how='outer')
            i += 1
            names.append(name)
        result.columns = ['Entry'] + result.columns.to_list()[1:]
        print(f'Merging entry counts with info at {input.uniprotinfo[0]}')
        result = pd.merge(result, uniprotinfo, on='Entry', how='left')
        multi_sheet_excel(f"{config['output']}/MOSCA_Entry_Counts_Report.xlsx", result, sheet_name='Sheet')
        result.to_csv(f"{config['output']}/MOSCA_Entry_Counts_Report.tsv", index=False, sep='\t')
        result[['Entry'] + names].to_csv(f"{config['output']}/Quantification/expression_matrix.tsv",
                                         sep='\t', index=False)
'''

rule differential_expression:
    input:
        f"{config['output']}/Quantification/expression_matrix.tsv"
    output:
        f"{config['output']}/Quantification/condition_treated_results.tsv"
    threads:
        1
    params:
        conditions = ",".join(mt_exps['Condition'].tolist()),
        output= config["output"],
        minimum_fold_change=config["minimum_differential_expression"]
    shell:
        "Rscript {scripts_dir}/de_analysis.R --readcounts {input} --conditions {params.conditions} "
        "--output {params.output}/Quantification --foldchange {params.minimum_fold_change}"

rule keggcharter:
    input:
        f"{config['output']}/MOSCA_Entry_Report.xlsx"
    output:
        f"{config['output']}/KEGG_maps/KEGGCharter_results.tsv"
    threads:
        1
    params:
        outdir=f"{config['output']}/KEGG_maps",
        mg_cols= ','.join(mg_exps['Name'].tolist()),
        resources_directory=config["resources_directory"],
        metabolic_maps=f" -mm {','.join(config['keggcharter_maps']) if len(config['keggcharter_maps']) > 0 else ''}",
        exp_cols=f" -tcol {','.join(mt_exps['Name'].tolist())}" if len(mt_exps) > 0 else '',
        taxa_level=config["keggcharter_taxa_level"],
        number_of_taxa=config["keggcharter_number_of_taxa"]
    shell:
        "keggcharter.py -f {input} -o {params.outdir} -gcol {params.mg_cols}{params.exp_cols} "
        "-tc 'Taxonomic lineage ({params.taxa_level})' -not {prams.number_of_taxa} -keggc 'Cross-reference (KEGG)' "
        "-rd {params.resources_directory}{params.metabolic_maps} || true"


rule report:
    input:
        f"{config['output']}/MOSCA_Protein_Report.xlsx",
        f"{config['output']}/MOSCA_Entry_Report.xlsx",
        f"{config['output']}/Quantification/condition_treated_results.tsv" if len(mt_exps) > 0 else []
    output:
        f"{config['output']}/technical_report.tsv",
        f"{config['output']}/MOSCA_General_Report.xlsx",
        f"{config['output']}/MOSCA_results.zip"
    threads:
        1
    params:
        output = config["output"],
        reporter_lists = f'{scripts_dir}/../resources',
        suffix = f' -s {config["suffix"]}' if config["suffix"] != '' else '',
        no_de = '' if len(mt_exps) > 0 else ' --no-differential-expression'
    shell:
        "python {scripts_dir}/report.py -e {params.output}/exps.tsv -o {params.output} -ldir {params.reporter_lists} "
        "-if tsv{params.suffix}{params.no_de}"

